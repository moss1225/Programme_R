1、因子的概念：因子的设计思想来源于统计学的名义变量，或称之为分类变量，
								这种变量的值本质上不是数字，而是对应分类，例如：民进党、
								共和党、无党派，尽管可以用数字对它们编码。
								
2、水平的概念：在R语言中，因子可以简单看作一个附加了更多信息的向量。这
								额外的信息包括向量中不同值得记录，称之为“水平”（level）。
x<-c(5,12,13,12)
xf<-factor(x)
xf 
输出：
# [1]5 12 13 12
# levels: 5 12 13
其中5 12 13就是水平
str(xf)
输出：
Factor w/3 levels “5” ,"12" ,  "13" : 1 2 3 2
unclass(xf)
xf的核心不是(5,12,13,12)而是(1,2,3,2)
后者表明数据是由水平1的值、水平2的值、水平3的值、水平2的值的构成

3、tapple函数
*** table类型对象由一个数组构成，该数组的元素就是标的单元格频数
我们假设有一个关于选民的向量x，以及一个引子f，表示这些选民的一些非数值特征，
例如党派(民主党、共和党、无党派)。我们希望找到x中每个党派的平均年龄。如果函
数中的一部分是向量，则需要用函数as.factor()强制将其转换成因子。
# 案例一
ages<-c(25,26,55,37,21,42)
affils<-c("R","D","D","R","U","D")
tapply(ages , affils , mean)
输出：
D    R    U
41  31  21
# 案例二
d<-data.frame(list(gender=c("M","M","F","M","F","F") , age=c(47 , 59 , 21 , 32 , 33 , 24 ) , income=c(55000 , 88000 , 32450 , 76500 , 123000 , 45650)))
d$over25<-ifelse(d$age>25,1,0)
tapply(d$income , list (d$gender , d$over25) , mean)
输出：
                0                1             
F          39050    123000.00
M           NA        73166.67

4、split()函数
tapply()是将向量分割为组。然后针对每个组应用指定的函数，与之不同的是，
splite()在第一步就停止了，只是形成分组。
split(d$income , list(d$gender ,  $over25))
g<-c("M" , "F" , "F" , "I" , "M" , "M" , "F" )
split( 1:7 , g )
获取g中的水平，将出现的索引位置根据水平进行分组记录。
输出：
$F
[1]2 3 7
$I
[1]4
$M
[1]1 5 6

5、by()函数
by()的调用方式与tapply()非常相似，第一个参数制定数据，第二个为分组因子，
第三个就是应用的函数。
正如tapply()根据因子的水平构建索引的分组，函数by()会查找出数据框aba不同分
组的行号。从而产生三个总数据框：分别对应于三个性别水平雄性、雌性、幼虫。
以鲍鱼数据集为例：
by(aba , aba$gender , function(m) lm( m[ , 2] ~ m[ , 3]))
返回根据性别分组的三个线性回归分析结果

6、表的操作
u<-c(22,8,33,6,3,8,29,-2)
fl<-list(c(5,12,13,12,13,5,13),c("a","bc","a","a","bc","a","a"))
table(fl)
tapply(u , fl , length)
输出：
         a    bc
  5     2    NA
12     1    1
13     2    1
将u划分为6个子向量，然后把函数length()应用在每个子向量
函数table()创建表，并将list形成表中的NA值转换0。
求长度的预算不依赖u中的具体数值

三维数据通过二维形式
 d<-data.frame(list(gender=c("M","M","F","M","F","F") , race=c("W","W","A","O","B","B" ) , pol=c("L","L","C","L","L","C")))
table(d)

7、表中有关矩阵和类似数组的操作
cttable<-table(data)
class(cttable)                      #检测数据类型
cttable[1,1]                        #显示它的[1,1]元素
cttable[1, ]                        #显示它的第一行
apply(cttable , 1 ,  sum)     #按行进行求和
dimnames(cttable)            #获得维度的名称和水平值

8、其他与因子和表有关的函数
***aggregate()函数：
			函数对分组中的每一个变量调用tapply()函数。
		例如，在暴雨数据中，按性别分组，我们可以找到每个变量的中位数。
			aggregate(aba[ , -1] , list( aba$Gender ) , median)
		结果：
			  Group.1 Length Diameter Height WholeWt ShuckedWt ViscWt ShellWt Rings
	1       F  0.590    0.465  0.160 1.03850   0.44050 0.2240   0.295    10
	2       I  0.435    0.335  0.110 0.38400   0.16975 0.0805   0.113     8
	3       M  0.580    0.455  0.155 0.97575   0.42175 0.2100   0.276    10
		说明：
		第一个aba[ , -1] 表示除去第一列之外的整个数据框。
		第二个参数必须是一个列表，表示分组。
		第三个参数，表示调用函数。
		
***cut()函数
		cut()函数是生成因子的一种常用方法，尤其是常用于标的操作。该函数需要一个数据向量x
		和有向量b定义的一组区间，函数将确定x中每个元素降落在那个区间。
		y <- cut(x , b , labels=FALSE)