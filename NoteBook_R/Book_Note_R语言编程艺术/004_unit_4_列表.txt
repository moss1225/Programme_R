(1)创建列表
*方法一
j<-list(name="Joe",salary=55000,union=T)
j$name
j[1:2]
*方法二
z<-vector(mode="list")
z[["abc"]]<-3
z$abc

(2)添加/删除
*添加
j[[4]]="newValue"
*删除
将值改为NULL，就删除索引。
j<-list(name="Joe",salary=55000,union=T)
j$salary=NULL
j#输出j

(3)获取长度length(j)

(4)访问列表元素names(列表)

(5)获取列表的值ulj<-unlist(列表)

(6)去掉元素名称 wun=unname(wun)

(7)在列表上使用apply系列函数
	1、lapply()代表list apply与矩阵函数apply()函数用法相似，对列表（或强制转换成列表的向量）
	的每个组建执行给定的函数，并返回另一个列表：
	***
	lapply(list(1:3,25:29),median)
	#分别求1:3,25:29的中位数，返回有2和27组成的列表[[1]]=2,[[2]]=27
	***
	
	2、sapply()将lapply的返回值可以转换成矩阵或者向量的形式。
	sapply(list(1:3,25:29),median)返回[1]=2 27
	
(8)扩展案例：鲍鱼数据
g<-c("M","F","F","I","M","M","F")
lapply(c("M","F","I"),function(gender),which(g==gender))
#↑函数略写，取不同性别的鲍鱼，并分别按照性别进行列表形式的是索引返回。
	
(9)递归型列表
***程序调用自身的编程技巧称为递归（ recursion）。
b<-list(u = 5 , v = 12)
c<-list(w = 13)
a<-list(b , c)
a[[1]]$1
***用recursive参数可以将列表压平
a<-c( list(b , c) )                         #递归
a<-c( list(b , c) ,  recursive = T)   #非递归









